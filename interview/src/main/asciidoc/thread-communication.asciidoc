= 线程间通信
//Cheng Cheng;
//:doctype: book
//:revdate: {docdate}
//:sectanchors:
//:xrefstyle: full
//:anchor:
////:source-highlighter: highlightjs
//:source-highlighter: coderay
//:toc: left
//:toclevels: 5
//:sectnumlevels: 6
//:docinfo:


== wait 和 notify
`wait()` 和 `notify()` 必须拥有该对象的 `monitor`，也就是必须在同步方法中使用。

必须在同步方法中使用 `wait()` 和 `notify()` 方法，因为执行 `wait()` 和 `notify()` 的前提条件是必须持有同步方法的 `monitor` 的所有权，运行下面任何一个方法都会抛出非法的 `monitor` 状态异常 `IllegalMonitorStateException` 。



== wait 和 sleep
- wait 和 sleep 方法都可以使线程进入阻塞状态。
- wait 和 sleep 方法均是可中断方法，被中断后都会收到中断异常。
- wait 是 Object 的方法，而 sleep 是 Thread 特有的方法。
- wait 方法的执行必须在同步方法中进行，而 sleep 则不需要。
- 线程在同步方法中执行 sleep 方法时，并不会释放 monitor 的锁，而 wait 方法则会释放 monitor 的锁。
- sleep 方法短暂休眠之后会主动退出阻塞，而 wait 方法（没有指定 wait 时间）则需要被其他线程中断后才能退出阻塞。



== 线程休息室 wait set
线程调用了某个对象的 wait 方法之后都会被加入与该对象 monitor 关联的 wait set 中，并且释放 monitor 的所有权。



== synchronized
synchronized 关键字提供了一种排他式的数据同步机制，某个线程在获取 monitor lock 的时候可能会被阻塞。
这种阻塞有两个很明显的缺陷：第一，无法控制阻塞市场。第二，阻塞不可被中断。



== 线程池拒绝策略
* `CallerRunsPolicy` 调用者自己执行，除非线程池被shutdown
* `AbortPolicy` 抛出 `RejectedExecutionException`
* `DiscardPolicy` 直接丢弃任务
* `DiscardOldestPolicy` 丢弃最早加入任务队列的任务